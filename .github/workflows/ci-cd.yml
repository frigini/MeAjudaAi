name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      deploy_infrastructure:
        description: 'Deploy infrastructure to dev'
        required: false
        default: true
        type: boolean
      cleanup_after_test:
        description: 'Cleanup dev resources after deployment test'
        required: false
        default: false
        type: boolean

env:
  DOTNET_VERSION: '9.0.x'
  AZURE_RESOURCE_GROUP_DEV: 'meajudaai-dev'
  AZURE_LOCATION: 'brazilsouth'

jobs:
  # Job 1: Build and Test
  build-and-test:
    name: Build and Test
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}

    - name: Restore dependencies
      run: dotnet restore MeAjudaAi.sln

    - name: Build solution
      run: dotnet build MeAjudaAi.sln --configuration Release --no-restore

    - name: Run tests
      run: |
        echo "🧪 Executando todos os testes com reorganização de namespaces..."
        
        # Validar namespace reorganization primeiro
        echo "🔍 Validando reorganização de namespaces..."
        if find src/ -name "*.cs" -exec grep -l "using MeAjudaAi\.Shared\.Common;" {} \; 2>/dev/null | head -1; then
          echo "❌ ERRO: Encontradas referências ao namespace antigo MeAjudaAi.Shared.Common"
          exit 1
        fi
        echo "✅ Namespaces validados"
        
        # Executar testes por projeto
        dotnet test tests/MeAjudaAi.Shared.Tests/MeAjudaAi.Shared.Tests.csproj --configuration Release --no-build --verbosity normal --collect:"XPlat Code Coverage" --results-directory TestResults/Shared
        dotnet test tests/MeAjudaAi.Architecture.Tests/MeAjudaAi.Architecture.Tests.csproj --configuration Release --no-build --verbosity normal --collect:"XPlat Code Coverage" --results-directory TestResults/Architecture
        ASPNETCORE_ENVIRONMENT=Testing dotnet test tests/MeAjudaAi.Integration.Tests/MeAjudaAi.Integration.Tests.csproj --configuration Release --no-build --verbosity normal --collect:"XPlat Code Coverage" --results-directory TestResults/Integration
        
        echo "✅ Todos os testes executados com sucesso"

    - name: Install ReportGenerator
      run: dotnet tool install -g dotnet-reportgenerator-globaltool

    - name: Generate Code Coverage Report
      run: |
        reportgenerator \
          -reports:"TestResults/**/coverage.cobertura.xml" \
          -targetdir:"TestResults/Coverage" \
          -reporttypes:"Html;Cobertura;JsonSummary" \
          -assemblyfilters:"-*.Tests*" \
          -classfilters:"-*.Migrations*"

    - name: Upload code coverage
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: code-coverage
        path: "TestResults/Coverage/**/*"

    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-results
        path: "**/TestResults/**/*"

  # Job 2: Infrastructure Validation
  validate-infrastructure:
    name: Validate Infrastructure
    runs-on: ubuntu-latest
    needs: build-and-test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Login to Azure
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    - name: Validate Bicep templates
      run: |
        az bicep build --file infrastructure/main.bicep
        az deployment group validate \
          --resource-group ${{ env.AZURE_RESOURCE_GROUP_DEV }} \
          --template-file infrastructure/main.bicep \
          --parameters environmentName=dev location=${{ env.AZURE_LOCATION }} || echo "Resource group might not exist yet"

  # Job 3: Deploy to Development
  deploy-dev:
    name: Deploy to Development
    runs-on: ubuntu-latest
    needs: [build-and-test, validate-infrastructure]
    if: github.ref == 'refs/heads/develop' || github.event_name == 'workflow_dispatch'
    environment: development
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Login to Azure
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    - name: Create Resource Group
      run: |
        az group create \
          --name ${{ env.AZURE_RESOURCE_GROUP_DEV }} \
          --location ${{ env.AZURE_LOCATION }}

    - name: Deploy Infrastructure
      if: github.event.inputs.deploy_infrastructure == 'true' || github.event.inputs.deploy_infrastructure == ''
      run: |
        DEPLOYMENT_NAME="meajudaai-dev-$(date +%s)"
        az deployment group create \
          --name "$DEPLOYMENT_NAME" \
          --resource-group ${{ env.AZURE_RESOURCE_GROUP_DEV }} \
          --template-file infrastructure/main.bicep \
          --parameters environmentName=dev location=${{ env.AZURE_LOCATION }}
        
        # Export infrastructure outputs for reference
        az deployment group show \
          --name "$DEPLOYMENT_NAME" \
          --resource-group ${{ env.AZURE_RESOURCE_GROUP_DEV }} \
          --query "properties.outputs" > infrastructure-outputs.json
        
        echo "Infrastructure outputs:"
        cat infrastructure-outputs.json
        
        # Get connection string for development use
        SERVICE_BUS_NAMESPACE=$(jq -r '.serviceBusNamespace.value' infrastructure-outputs.json)
        MANAGEMENT_POLICY_NAME=$(jq -r '.managementPolicyName.value' infrastructure-outputs.json)
        
        CONNECTION_STRING=$(az servicebus namespace authorization-rule keys list \
          --resource-group ${{ env.AZURE_RESOURCE_GROUP_DEV }} \
          --namespace-name "$SERVICE_BUS_NAMESPACE" \
          --name "$MANAGEMENT_POLICY_NAME" \
          --query "primaryConnectionString" \
          --output tsv)
        
        echo "✅ Infrastructure deployed successfully!"
        echo "🔗 Service Bus Namespace: $SERVICE_BUS_NAMESPACE"
        echo "💡 To use locally, set: export Messaging__ServiceBus__ConnectionString='[CONNECTION_STRING]'"

    - name: Upload infrastructure outputs
      uses: actions/upload-artifact@v4
      with:
        name: infrastructure-outputs-dev
        path: infrastructure-outputs.json

    - name: Cleanup after test (if requested)
      if: github.event.inputs.cleanup_after_test == 'true'
      run: |
        echo "🧹 Cleaning up dev resources as requested..."
        az group delete --name ${{ env.AZURE_RESOURCE_GROUP_DEV }} --yes --no-wait
        echo "✅ Cleanup initiated (resources will be deleted in a few minutes)"
