name: Pull Request Validation

on:
  pull_request:
    branches: [ main, develop ]

env:
  DOTNET_VERSION: '9.0.x'

jobs:
  # Job 1: Code Quality Checks
  code-quality:
    name: Code Quality Checks
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Shallow clones should be disabled for a better relevancy of analysis

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}

    - name: Restore dependencies
      run: dotnet restore MeAjudaAi.sln

    - name: Build solution
      run: dotnet build MeAjudaAi.sln --configuration Release --no-restore

    - name: Run tests with coverage
      run: |
        dotnet test MeAjudaAi.sln \
          --configuration Release \
          --no-build \
          --verbosity normal \
          --collect:"XPlat Code Coverage" \
          --results-directory ./coverage

    - name: Code Coverage Summary
      uses: irongut/CodeCoverageSummary@v1.3.0
      with:
        filename: coverage/**/coverage.cobertura.xml
        badge: true
        fail_below_min: false
        format: markdown
        hide_branch_rate: false
        hide_complexity: true
        indicators: true
        output: both
        thresholds: '60 80'

    - name: Add Coverage PR Comment
      uses: marocchino/sticky-pull-request-comment@v2
      if: github.event_name == 'pull_request'
      with:
        recreate: true
        path: code-coverage-results.md

  # Job 2: Infrastructure Validation
  infrastructure-validation:
    name: Infrastructure Validation
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Login to Azure (for validation only)
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    - name: Install Bicep CLI
      run: |
        curl -Lo bicep https://github.com/Azure/bicep/releases/latest/download/bicep-linux-x64
        chmod +x ./bicep
        sudo mv ./bicep /usr/local/bin/bicep

    - name: Validate Bicep syntax
      run: |
        bicep build infrastructure/main.bicep
        bicep build infrastructure/servicebus.bicep

    - name: Bicep Linting
      run: |
        az bicep build --file infrastructure/main.bicep --stdout > /dev/null

    - name: Check for Bicep best practices
      run: |
        echo "‚úÖ Bicep templates validation completed"
        echo "üìã Validation Summary:"
        echo "- main.bicep: Syntax valid"
        echo "- servicebus.bicep: Syntax valid"

  # Job 3: Security Scan
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}

    - name: Restore dependencies
      run: dotnet restore MeAjudaAi.sln

    - name: Run Security Audit
      run: dotnet list package --vulnerable --include-transitive || true

    - name: Check for hardcoded secrets (basic check)
      run: |
        echo "üîç Checking for potential hardcoded secrets..."
        # Check for common secret patterns
        if grep -r -E "(password|secret|key|token)\s*=\s*['\"][^'\"]{10,}" --include="*.cs" --include="*.json" --exclude="*.yml" src/ || true; then
          echo "‚ö†Ô∏è Potential hardcoded secrets found. Please review the above results."
        else
          echo "‚úÖ No obvious hardcoded secrets detected"
        fi
