---
name: Pull Request Validation

on:
  pull_request:
    branches: [master, develop]

permissions:
  contents: read
  pull-requests: write
  checks: write
  statuses: write

env:
  DOTNET_VERSION: '9.0.x'

jobs:
  # Job 1: Code Quality Checks
  code-quality:
    name: Code Quality Checks
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      - name: Restore dependencies
        run: dotnet restore MeAjudaAi.sln

      - name: Build solution
        run: dotnet build MeAjudaAi.sln --configuration Release --no-restore

      - name: Run tests with coverage
        run: |
          echo "🧪 Executando testes com cobertura..."
          dotnet test tests/MeAjudaAi.Shared.Tests/MeAjudaAi.Shared.Tests.csproj \
            --configuration Release \
            --no-build \
            --verbosity normal \
            --collect:"XPlat Code Coverage" \
            --results-directory ./coverage/shared \
            --logger "trx;LogFileName=shared-tests.trx"
            
          dotnet test tests/MeAjudaAi.Architecture.Tests/MeAjudaAi.Architecture.Tests.csproj \
            --configuration Release \
            --no-build \
            --verbosity normal \
            --collect:"XPlat Code Coverage" \
            --results-directory ./coverage/architecture \
            --logger "trx;LogFileName=architecture-tests.trx"
            
          echo "✅ Testes executados com sucesso"

      - name: Validate namespace reorganization
        run: |
          echo "🔍 Validating namespace reorganization..."
          if grep -R -nP '^\s*using\s+MeAjudaAi\.Shared\.Common;' -- src/ 2>/dev/null; then
            echo "❌ Found old namespace imports"
            exit 1
          else
            echo "✅ Conformidade com namespaces validada"
          fi

      - name: Upload Shared coverage
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: coverage-shared
          path: coverage/shared/**

      - name: Upload Architecture coverage
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: coverage-architecture
          path: coverage/architecture/**

      - name: Upload Test Results (TRX)
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-results-trx
          path: "**/*.trx"

      - name: Code Coverage Summary
        uses: irongut/CodeCoverageSummary@v1.3.0
        with:
          filename: coverage/**/coverage.cobertura.xml
          badge: true
          fail_below_min: false
          format: markdown
          hide_branch_rate: false
          hide_complexity: true
          indicators: true
          output: both
          thresholds: '60 80'

      - name: Add Coverage PR Comment
        uses: marocchino/sticky-pull-request-comment@v2
        if: github.event_name == 'pull_request'
        with:
          recreate: true
          path: code-coverage-results.md

  # Job 2: Infrastructure Validation (Optional)
  infrastructure-validation:
    name: Infrastructure Validation
    runs-on: ubuntu-latest
    if: false  # Disabled until Azure credentials are configured
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Login to Azure (for validation only)
        uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Install Bicep CLI
        run: |
          curl -Lo bicep https://github.com/Azure/bicep/releases/latest/download/bicep-linux-x64
          chmod +x ./bicep
          sudo mv ./bicep /usr/local/bin/bicep

      - name: Validate Bicep syntax
        run: |
          bicep build infrastructure/main.bicep
          bicep build infrastructure/servicebus.bicep

      - name: Bicep Linting
        run: |
          az bicep build --file infrastructure/main.bicep --stdout > /dev/null

      - name: Check for Bicep best practices
        run: |
          echo "✅ Bicep templates validation completed"
          echo "📋 Validation Summary:"
          echo "- main.bicep: Syntax valid"
          echo "- servicebus.bicep: Syntax valid"

  # Job 3: Security Scan
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      - name: Restore dependencies
        run: dotnet restore MeAjudaAi.sln

      - name: Run Security Audit
        run: dotnet list package --vulnerable --include-transitive || true

  # Job 3: Secret Detection with Gitleaks
  secret-scan:
    name: Secret Detection
    runs-on: ubuntu-latest
    
    env:
      GITLEAKS_LICENSE: ${{ secrets.GITLEAKS_LICENSE }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Gitleaks Secret Scan
        # Only run if GITLEAKS_LICENSE is available (required for organizations)
        if: env.GITLEAKS_LICENSE != ''
        uses: gitleaks/gitleaks-action@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITLEAKS_LICENSE: ${{ secrets.GITLEAKS_LICENSE }}
        with:
          config-path: .gitleaks.toml
          
      - name: Alternative Secret Scan (TruffleHog)
        # Run TruffleHog as backup secret scanner (always runs)
        uses: trufflesecurity/trufflehog@main
        with:
          path: ./
          base: ${{ github.event.pull_request.base.ref }}
          head: HEAD
          extra_args: --debug --only-verified

  # Job 4: Markdown Link Validation  
  markdown-link-check:
    name: Validate Markdown Links
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Cache lychee results
        uses: actions/cache@v4
        with:
          path: .lycheecache
          key: lychee-${{ runner.os }}-${{ hashFiles('**/*.md','lychee.toml') }}
          restore-keys: |
            lychee-${{ runner.os }}-

      - name: Check markdown links with lychee
        uses: lycheeverse/lychee-action@v1.10.0
        with:
          # Check all markdown files in the repository using config file
          args: --config lychee.toml --verbose --no-progress --cache "**/*.md"
          # Fail the job if broken links are found
          fail: true
          # Only check local file links for now to avoid external link issues
          jobSummary: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
