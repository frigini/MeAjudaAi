using MeAjudaAi.Integration.Tests.Aspire;
using Xunit;
using Xunit.Abstractions;

namespace MeAjudaAi.Integration.Tests.Base;

/// <summary>
/// üîó BASE PARA TESTES DE INTEGRA√á√ÉO ENTRE M√ìDULOS
/// 
/// Use esta classe base para testes que precisam de:
/// - RabbitMQ para comunica√ß√£o entre m√≥dulos
/// - Redis para cache distribu√≠do
/// - Ambiente completo de integra√ß√£o
/// 
/// Exemplos de uso:
/// - Testes de eventos entre m√≥dulos
/// - Fluxos end-to-end completos
/// - Testes de performance com cache
/// 
/// Para testes simples de API, use ApiTestBase (mais r√°pido).
/// </summary>
public abstract class IntegrationTestBase : IClassFixture<AspireIntegrationFixture>, IAsyncLifetime
{
    protected readonly AspireIntegrationFixture _fixture;
    protected readonly ITestOutputHelper _output;
    protected HttpClient HttpClient => _fixture.HttpClient;

    protected IntegrationTestBase(AspireIntegrationFixture fixture, ITestOutputHelper output)
    {
        _fixture = fixture;
        _output = output;
    }

    public virtual Task InitializeAsync()
    {
        _output.WriteLine($"üîó [IntegrationTest] Iniciando teste de integra√ß√£o");
        return Task.CompletedTask;
    }

    public virtual Task DisposeAsync()
    {
        _output.WriteLine($"üßπ [IntegrationTest] Finalizando teste de integra√ß√£o");
        return Task.CompletedTask;
    }

    /// <summary>
    /// Helper para aguardar processamento ass√≠ncrono de mensagens
    /// </summary>
    protected async Task WaitForMessageProcessing(TimeSpan? timeout = null)
    {
        timeout ??= TimeSpan.FromSeconds(5);
        _output.WriteLine($"‚è±Ô∏è [IntegrationTest] Aguardando processamento de mensagens por {timeout.Value.TotalSeconds}s...");
        await Task.Delay(timeout.Value);
    }

    /// <summary>
    /// Helper para verificar se servi√ßos de integra√ß√£o est√£o funcionando
    /// </summary>
    protected async Task<bool> VerifyIntegrationServices()
    {
        try
        {
            var healthResponse = await HttpClient.GetAsync("/health");
            var readyResponse = await HttpClient.GetAsync("/health/ready");
            
            var isHealthy = healthResponse.IsSuccessStatusCode && readyResponse.IsSuccessStatusCode;
            _output.WriteLine($"üè• [IntegrationTest] Servi√ßos de integra√ß√£o: {(isHealthy ? "‚úÖ Funcionando" : "‚ùå Com problemas")}");
            
            return isHealthy;
        }
        catch (Exception ex)
        {
            _output.WriteLine($"‚ùå [IntegrationTest] Erro ao verificar servi√ßos: {ex.Message}");
            return false;
        }
    }
}