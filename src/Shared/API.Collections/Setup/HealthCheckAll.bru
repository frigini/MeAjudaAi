meta {
  name: Health Check All Services
  type: http
  seq: 1
}

get {
  url: {{baseUrl}}/health
  body: none
  auth: none
}

headers {
  Accept: application/json
}

script:post-response {
  if (res.status === 200) {
    const health = res.getBody();
    console.log("üè• Health Check Results:");
    console.log("================================");
    
    if (health.status) {
      console.log("‚úÖ Overall Status:", health.status);
    }
    
    if (health.results) {
      Object.entries(health.results).forEach(([service, result]) => {
        const icon = result.status === "Healthy" ? "‚úÖ" : "‚ùå";
        console.log(`${icon} ${service}: ${result.status}`);
        if (result.description) {
          console.log(`   üìù ${result.description}`);
        }
      });
    }
    
    console.log("================================");
    
    if (health.status === "Healthy") {
      console.log("üéâ All services are healthy!");
    } else {
      console.log("‚ö†Ô∏è  Some services need attention!");
    }
  } else {
    console.log("‚ùå Health check failed!");
    console.log("Status:", res.status);
    console.log("Response:", res.getBody());
  }
}

docs {
  # Health Check All Services
  
  Verifica o status de sa√∫de de todos os servi√ßos da aplica√ß√£o MeAjudaAi.
  
  ## O que verifica
  - ‚úÖ **API Principal**: Status da API REST
  - ‚úÖ **PostgreSQL**: Conectividade com banco de dados
  - ‚úÖ **Redis**: Cache e sess√µes
  - ‚úÖ **RabbitMQ**: Message broker
  - ‚úÖ **Keycloak**: Servi√ßo de autentica√ß√£o
  
  ## Resposta Esperada (Healthy)
  ```json
  {
    "status": "Healthy",
    "totalDuration": "00:00:00.1234567",
    "results": {
      "database": {
        "status": "Healthy",
        "description": "PostgreSQL connection successful",
        "duration": "00:00:00.0123456"
      },
      "redis": {
        "status": "Healthy",
        "description": "Redis cache operational"
      },
      "keycloak": {
        "status": "Healthy",
        "description": "Keycloak authentication service ready"
      },
      "rabbitmq": {
        "status": "Healthy",
        "description": "Message broker connected"
      }
    }
  }
  ```
  
  ## C√≥digos de Status
  - **200**: Todos os servi√ßos saud√°veis
  - **503**: Um ou mais servi√ßos com problema
  - **500**: Erro interno na verifica√ß√£o
  
  ## Uso Recomendado
  - Execute antes de iniciar testes
  - Use em pipelines de CI/CD
  - Diagn√≥stico r√°pido de problemas
  
  ## Troubleshooting
  ### Se algum servi√ßo est√° Unhealthy:
  1. Verifique Aspire Dashboard: https://localhost:15888
  2. Confirme se containers Docker est√£o rodando
  3. Verifique logs espec√≠ficos do servi√ßo
  4. Reinicie Aspire se necess√°rio
}