using MeAjudaAi.Modules.Users.API.Mappers;
using MeAjudaAi.Modules.Users.Application.Commands;
using MeAjudaAi.Shared.Authorization;
using MeAjudaAi.Shared.Commands;
using MeAjudaAi.Shared.Constants;
using MeAjudaAi.Shared.Endpoints;
using MeAjudaAi.Shared.Functional;
using Microsoft.AspNetCore.Builder;
using Microsoft.AspNetCore.Http;
using Microsoft.AspNetCore.Routing;

namespace MeAjudaAi.Modules.Users.API.Endpoints.UserAdmin;

/// <summary>
/// Endpoint respons√°vel pela exclus√£o de usu√°rios do sistema.
/// </summary>
/// <remarks>
/// Implementa padr√£o de endpoint m√≠nimo para exclus√£o l√≥gica de usu√°rios
/// utilizando arquitetura CQRS. Restrito apenas para administradores devido
/// √† criticidade da opera√ß√£o. Realiza soft delete preservando dados para
/// auditoria e poss√≠vel recupera√ß√£o futura.
/// </remarks>
public class DeleteUserEndpoint : BaseEndpoint, IEndpoint
{
    /// <summary>
    /// Configura o mapeamento do endpoint de exclus√£o de usu√°rio.
    /// </summary>
    /// <param name="app">Builder de rotas do endpoint</param>
    /// <remarks>
    /// Configura endpoint DELETE em "/{id:guid}" com:
    /// - Autoriza√ß√£o AdminOnly (apenas administradores podem excluir usu√°rios)
    /// - Valida√ß√£o autom√°tica de GUID para o par√¢metro ID
    /// - Soft delete preservando dados para auditoria
    /// - Resposta 204 No Content para sucesso
    /// </remarks>
    public static void Map(IEndpointRouteBuilder app)
        => app.MapDelete(ApiEndpoints.Users.Delete, DeleteUserAsync)
            .WithName("DeleteUser")
            .WithSummary("Excluir usu√°rio")
            .WithDescription("""
                Realiza exclus√£o l√≥gica (soft delete) de um usu√°rio espec√≠fico no sistema.
                
                **Caracter√≠sticas:**
                - üóëÔ∏è Soft delete preservando dados para auditoria
                - ‚ö° Opera√ß√£o otimizada e transacional
                - üîí Acesso restrito apenas para administradores
                - üìä Logs completos de auditoria
                
                **Importante:**
                - Usu√°rio ser√° marcado como inativo, n√£o removido fisicamente
                - Dados preservados para conformidade e auditoria
                - Opera√ß√£o irrevers√≠vel atrav√©s da API (requer interven√ß√£o manual)
                - Sessions ativas do usu√°rio ser√£o invalidadas
                
                **Resposta:**
                - 204 No Content: Exclus√£o realizada com sucesso
                - 404 Not Found: Usu√°rio n√£o encontrado
                """)
            .RequireAdmin()
            .Produces(StatusCodes.Status204NoContent)
            .Produces(StatusCodes.Status404NotFound);

    /// <summary>
    /// Implementa a l√≥gica de exclus√£o de usu√°rio.
    /// </summary>
    /// <param name="id">ID √∫nico do usu√°rio a ser exclu√≠do (GUID)</param>
    /// <param name="commandDispatcher">Dispatcher para envio de commands CQRS</param>
    /// <param name="cancellationToken">Token de cancelamento da opera√ß√£o</param>
    /// <returns>Resultado HTTP sem conte√∫do (204) ou erro apropriado</returns>
    /// <remarks>
    /// Processo de exclus√£o:
    /// 1. Valida ID do usu√°rio no formato GUID
    /// 2. Cria command usando mapper ToDeleteCommand
    /// 3. Envia command atrav√©s do dispatcher CQRS
    /// 4. Retorna resposta HTTP 204 No Content
    /// </remarks>
    private static async Task<IResult> DeleteUserAsync(
        Guid id,
        ICommandDispatcher commandDispatcher,
        CancellationToken cancellationToken)
    {
        var command = id.ToDeleteCommand();
        var result = await commandDispatcher.SendAsync<DeleteUserCommand, Result>(
            command, cancellationToken);

        return HandleNoContent(result);
    }
}
