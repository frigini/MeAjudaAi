using MeAjudaAi.Modules.Users.API.Mappers;
using MeAjudaAi.Modules.Users.Application.DTOs;
using MeAjudaAi.Modules.Users.Application.Queries;
using MeAjudaAi.Shared.Authorization;
using MeAjudaAi.Shared.Constants;
using MeAjudaAi.Shared.Contracts;
using MeAjudaAi.Shared.Endpoints;
using MeAjudaAi.Shared.Functional;
using MeAjudaAi.Shared.Queries;
using Microsoft.AspNetCore.Builder;
using Microsoft.AspNetCore.Http;
using Microsoft.AspNetCore.Routing;

namespace MeAjudaAi.Modules.Users.API.Endpoints.UserAdmin;

/// <summary>
/// Endpoint respons√°vel pela consulta de usu√°rio espec√≠fico por ID.
/// </summary>
/// <remarks>
/// Implementa padr√£o de endpoint m√≠nimo para consulta de usu√°rio √∫nico
/// utilizando arquitetura CQRS. Permite que usu√°rios consultem seus pr√≥prios
/// dados ou administradores consultem dados de qualquer usu√°rio. Valida
/// autoriza√ß√£o antes de retornar os dados do usu√°rio.
/// </remarks>
public class GetUserByIdEndpoint : BaseEndpoint, IEndpoint
{
    /// <summary>
    /// Configura o mapeamento do endpoint de consulta de usu√°rio por ID.
    /// </summary>
    /// <param name="app">Builder de rotas do endpoint</param>
    /// <remarks>
    /// Configura endpoint GET em "/{id:guid}" com:
    /// - Autoriza√ß√£o SelfOrAdmin (usu√°rio pode ver pr√≥prios dados ou admin v√™ qualquer usu√°rio)
    /// - Valida√ß√£o autom√°tica de GUID para o par√¢metro ID
    /// - Documenta√ß√£o OpenAPI autom√°tica
    /// - Respostas estruturadas para sucesso (200) e n√£o encontrado (404)
    /// </remarks>
    public static void Map(IEndpointRouteBuilder app)
        => app.MapGet(ApiEndpoints.Users.GetById, GetUserAsync)
            .WithName("GetUser")
            .WithSummary("Consultar usu√°rio por ID")
            .WithDescription("""
                Recupera dados completos de um usu√°rio espec√≠fico atrav√©s de seu identificador √∫nico.
                
                **Caracter√≠sticas:**
                - üîç Busca direta por ID √∫nico (GUID)
                - ‚ö° Consulta otimizada e cache autom√°tico
                - üîí Controle de acesso: usu√°rio pr√≥prio ou administrador
                - üìä Retorna dados completos do perfil
                
                **Resposta incluir√°:**
                - Informa√ß√µes b√°sicas do usu√°rio
                - Dados do perfil (nome, sobrenome, email)
                - Metadados de cria√ß√£o e atualiza√ß√£o
                - Pap√©is e permiss√µes associados
                """)
            .RequireSelfOrAdmin()
            .Produces<Response<UserDto>>(StatusCodes.Status200OK)
            .Produces(StatusCodes.Status404NotFound);

    /// <summary>
    /// Implementa a l√≥gica de consulta de usu√°rio por ID.
    /// </summary>
    /// <param name="id">ID √∫nico do usu√°rio (GUID)</param>
    /// <param name="queryDispatcher">Dispatcher para envio de queries CQRS</param>
    /// <param name="cancellationToken">Token de cancelamento da opera√ß√£o</param>
    /// <returns>Resultado HTTP com dados do usu√°rio ou erro apropriado</returns>
    /// <remarks>
    /// Processo da consulta:
    /// 1. Valida ID do usu√°rio no formato GUID
    /// 2. Cria query usando mapper ToQuery
    /// 3. Envia query atrav√©s do dispatcher CQRS
    /// 4. Retorna resposta HTTP com dados do usu√°rio
    /// </remarks>
    private static async Task<IResult> GetUserAsync(
        Guid id,
        IQueryDispatcher queryDispatcher,
        CancellationToken cancellationToken)
    {
        var query = id.ToQuery();
        var result = await queryDispatcher.QueryAsync<GetUserByIdQuery, Result<UserDto>>(
            query, cancellationToken);

        return Handle(result);
    }
}
