meta {
  name: Update User
  type: http
  seq: 5
}

put {
  url: {{baseUrl}}/api/v1/users/{{userId}}
  body: json
  auth: bearer
}

auth:bearer {
  token: {{accessToken}}
}

headers {
  Content-Type: application/json
  Accept: application/json
}

body:json {
  {
    "firstName": "Updated",
    "lastName": "User",
    "email": "updated@example.com"
  }
}

docs {
  # Update User
  
  Atualiza informações de um usuário existente.
  
  ## Autorização
  - **Política**: SelfOrAdmin
  - **Requer token**: Sim
  
  ## Path Parameters
  - `id` (uuid, required): ID do usuário
  
  ## Body Parameters
  - `firstName` (string, optional): Novo primeiro nome
  - `lastName` (string, optional): Novo sobrenome
  - `email` (string, optional): Novo email (deve ser único)
  
  ## Instruções
  1. Configure a variável `userId` com um ID válido
  2. Ajuste os campos que deseja atualizar no body
  
  ## Resposta Esperada
  ```json
  {
    "success": true,
    "data": {
      "id": "uuid",
      "email": "updated@example.com",
      "firstName": "Updated",
      "lastName": "User",
      "username": "username",
      "isActive": true,
      "createdAt": "2025-01-01T00:00:00Z",
      "updatedAt": "2025-01-01T12:00:00Z",
      "roles": ["User"]
    },
    "message": "User updated successfully",
    "errors": []
  }
  ```
  
  ## Códigos de Status
  - **200**: Atualizado com sucesso
  - **400**: Dados inválidos
  - **401**: Token inválido
  - **403**: Sem permissão
  - **404**: Usuário não encontrado
  - **409**: Email já existe
}