using MeAjudaAi.Modules.Providers.API.Mappers;
using MeAjudaAi.Modules.Providers.Application.Commands;
using MeAjudaAi.Shared.Commands;
using MeAjudaAi.Shared.Endpoints;
using MeAjudaAi.Shared.Functional;
using Microsoft.AspNetCore.Builder;
using Microsoft.AspNetCore.Http;
using Microsoft.AspNetCore.Routing;

namespace MeAjudaAi.Modules.Providers.API.Endpoints.ProviderAdmin;

/// <summary>
/// Endpoint respons√°vel pela exclus√£o l√≥gica de prestadores de servi√ßos.
/// </summary>
/// <remarks>
/// Implementa padr√£o de endpoint m√≠nimo para exclus√£o l√≥gica (soft delete) de
/// prestadores utilizando arquitetura CQRS. Restrito apenas para administradores
/// devido √† criticidade da opera√ß√£o. Preserva dados para auditoria e poss√≠vel
/// recupera√ß√£o futura.
/// </remarks>
public class DeleteProviderEndpoint : BaseEndpoint, IEndpoint
{
    /// <summary>
    /// Configura o mapeamento do endpoint de exclus√£o de prestador.
    /// </summary>
    /// <param name="app">Builder de rotas do endpoint</param>
    /// <remarks>
    /// Configura endpoint DELETE em "/{id:guid}" com:
    /// - Autoriza√ß√£o AdminOnly (apenas administradores podem excluir prestadores)
    /// - Valida√ß√£o autom√°tica de GUID para o par√¢metro ID
    /// - Documenta√ß√£o OpenAPI autom√°tica
    /// - C√≥digos de resposta apropriados
    /// - Nome √∫nico para refer√™ncia
    /// </remarks>
    public static void Map(IEndpointRouteBuilder app)
        => app.MapDelete("/{id:guid}", DeleteProviderAsync)
            .WithName("DeleteProvider")
            .WithSummary("Excluir prestador de servi√ßos")
            .WithDescription("""
                Realiza exclus√£o l√≥gica (soft delete) de um prestador de servi√ßos.
                
                **üîí Acesso Restrito: Apenas Administradores**
                **‚ö†Ô∏è Opera√ß√£o Cr√≠tica: Requer justificativa administrativa**
                
                **Caracter√≠sticas:**
                - üóëÔ∏è Exclus√£o l√≥gica (dados preservados)
                - üîí Acesso restrito a administradores
                - üìã Auditoria completa da opera√ß√£o
                - üîÑ Possibilidade de recupera√ß√£o futura
                
                **Efeitos da exclus√£o:**
                - Prestador torna-se inativo imediatamente
                - Perfil removido das buscas p√∫blicas
                - Solicita√ß√µes ativas s√£o canceladas
                - Hist√≥rico preservado para auditoria
                - Usu√°rio associado permanece ativo
                
                **Dados preservados:**
                - Informa√ß√µes completas do prestador
                - Hist√≥rico de documentos e verifica√ß√µes
                - Relacionamentos com solicita√ß√µes
                - Metadados de cria√ß√£o e exclus√£o
                
                **Valida√ß√µes aplicadas:**
                - Prestador existente e ativo
                - Autoriza√ß√£o administrativa
                - N√£o existem depend√™ncias cr√≠ticas
                - Auditoria de motivo (futuro)
                """)
            .RequireAuthorization("AdminOnly")
            .Produces(StatusCodes.Status204NoContent)
            .Produces(StatusCodes.Status400BadRequest)
            .Produces(StatusCodes.Status404NotFound);

    /// <summary>
    /// Processa requisi√ß√£o de exclus√£o de prestador de forma ass√≠ncrona.
    /// </summary>
    /// <param name="id">ID √∫nico do prestador a ser exclu√≠do</param>
    /// <param name="commandDispatcher">Dispatcher para envio de comandos CQRS</param>
    /// <param name="cancellationToken">Token de cancelamento da opera√ß√£o</param>
    /// <returns>
    /// Resultado HTTP contendo:
    /// - 204 No Content: Prestador exclu√≠do com sucesso
    /// - 400 Bad Request: Erro de valida√ß√£o ou exclus√£o
    /// - 404 Not Found: Prestador n√£o encontrado
    /// </returns>
    /// <remarks>
    /// Fluxo de execu√ß√£o:
    /// 1. Valida ID do prestador e autoriza√ß√£o administrativa
    /// 2. Cria comando usando mapper ToDeleteCommand
    /// 3. Envia comando atrav√©s do dispatcher
    /// 4. Processa resultado e retorna status apropriado
    /// 5. Registra evento de auditoria (futuro)
    /// </remarks>
    private static async Task<IResult> DeleteProviderAsync(
        Guid id,
        ICommandDispatcher commandDispatcher,
        CancellationToken cancellationToken)
    {
        var command = id.ToDeleteCommand();
        var result = await commandDispatcher.SendAsync<DeleteProviderCommand, Result>(
            command, cancellationToken);

        return HandleNoContent(result);
    }
}
