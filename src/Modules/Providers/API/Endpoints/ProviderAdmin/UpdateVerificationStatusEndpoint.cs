using MeAjudaAi.Modules.Providers.API.Mappers;
using MeAjudaAi.Modules.Providers.Application.Commands;
using MeAjudaAi.Modules.Providers.Application.DTOs;
using MeAjudaAi.Modules.Providers.Application.DTOs.Requests;
using MeAjudaAi.Shared.Commands;
using MeAjudaAi.Shared.Contracts;
using MeAjudaAi.Shared.Endpoints;
using MeAjudaAi.Shared.Functional;
using Microsoft.AspNetCore.Builder;
using Microsoft.AspNetCore.Http;
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Routing;

namespace MeAjudaAi.Modules.Providers.API.Endpoints.ProviderAdmin;

/// <summary>
/// Endpoint respons√°vel pela atualiza√ß√£o do status de verifica√ß√£o de prestadores.
/// </summary>
/// <remarks>
/// Implementa padr√£o de endpoint m√≠nimo para gest√£o de status de verifica√ß√£o
/// utilizando arquitetura CQRS. Restrito apenas para administradores devido
/// √† criticidade da opera√ß√£o. Controla elegibilidade para presta√ß√£o de servi√ßos.
/// </remarks>
public class UpdateVerificationStatusEndpoint : BaseEndpoint, IEndpoint
{
    /// <summary>
    /// Configura o mapeamento do endpoint de atualiza√ß√£o de status.
    /// </summary>
    /// <param name="app">Builder de rotas do endpoint</param>
    /// <remarks>
    /// Configura endpoint PUT em "/{id:guid}/verification-status" com:
    /// - Autoriza√ß√£o AdminOnly (apenas administradores podem alterar status)
    /// - Valida√ß√£o autom√°tica de GUID para o par√¢metro ID
    /// - Documenta√ß√£o OpenAPI autom√°tica
    /// - C√≥digos de resposta apropriados
    /// - Nome √∫nico para refer√™ncia
    /// </remarks>
    public static void Map(IEndpointRouteBuilder app)
        => app.MapPut("/{id:guid}/verification-status", UpdateVerificationStatusAsync)
            .WithName("UpdateVerificationStatus")
            .WithSummary("Atualizar status de verifica√ß√£o")
            .WithDescription("""
                Atualiza o status de verifica√ß√£o de um prestador de servi√ßos.
                
                **üîí Acesso Restrito: Apenas Administradores**
                
                **Status dispon√≠veis:**
                - **Pending**: Aguardando verifica√ß√£o
                - **Verified**: Verificado e aprovado para servi√ßos
                - **Rejected**: Rejeitado na verifica√ß√£o
                - **Suspended**: Suspenso temporariamente
                
                **Caracter√≠sticas:**
                - ‚öñÔ∏è Controle administrativo de elegibilidade
                - üìã Auditoria autom√°tica de mudan√ßas
                - üîÑ Atualiza√ß√£o imediata do status
                - üìß Notifica√ß√µes autom√°ticas (futuro)
                
                **Efeitos do status:**
                - **Verified**: Prestador pode receber solicita√ß√µes
                - **Pending**: Perfil vis√≠vel mas sem solicita√ß√µes
                - **Rejected**: Perfil oculto, requer corre√ß√µes
                - **Suspended**: Temporariamente inativo
                
                **Valida√ß√µes aplicadas:**
                - Prestador existente e ativo
                - Autoriza√ß√£o administrativa
                - Transi√ß√£o de status v√°lida
                - Documenta√ß√£o adequada para verifica√ß√£o
                """)
            .RequireAuthorization("AdminOnly")
            .Produces<Response<ProviderDto>>(StatusCodes.Status200OK)
            .Produces(StatusCodes.Status400BadRequest)
            .Produces(StatusCodes.Status404NotFound);

    /// <summary>
    /// Processa requisi√ß√£o de atualiza√ß√£o de status de forma ass√≠ncrona.
    /// </summary>
    /// <param name="id">ID √∫nico do prestador</param>
    /// <param name="request">Dados do novo status de verifica√ß√£o</param>
    /// <param name="commandDispatcher">Dispatcher para envio de comandos CQRS</param>
    /// <param name="cancellationToken">Token de cancelamento da opera√ß√£o</param>
    /// <returns>
    /// Resultado HTTP contendo:
    /// - 200 OK: Status atualizado com sucesso e dados atualizados do prestador
    /// - 400 Bad Request: Erro de valida√ß√£o ou atualiza√ß√£o
    /// - 404 Not Found: Prestador n√£o encontrado
    /// </returns>
    /// <remarks>
    /// Fluxo de execu√ß√£o:
    /// 1. Valida ID do prestador e autoriza√ß√£o administrativa
    /// 2. Converte request em comando CQRS
    /// 3. Envia comando atrav√©s do dispatcher
    /// 4. Processa resultado e retorna prestador atualizado
    /// 5. Registra evento de auditoria (futuro)
    /// </remarks>
    private static async Task<IResult> UpdateVerificationStatusAsync(
        Guid id,
        [FromBody] UpdateVerificationStatusRequest request,
        ICommandDispatcher commandDispatcher,
        CancellationToken cancellationToken)
    {
        if (request is null)
            return Results.BadRequest("Request body is required");

        var command = request.ToCommand(id);
        var result = await commandDispatcher.SendAsync<UpdateVerificationStatusCommand, Result<ProviderDto>>(
            command, cancellationToken);

        return Handle(result);
    }
}
