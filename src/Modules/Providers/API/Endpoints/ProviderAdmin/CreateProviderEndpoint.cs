using MeAjudaAi.Modules.Providers.API.Mappers;
using MeAjudaAi.Modules.Providers.Application.Commands;
using MeAjudaAi.Modules.Providers.Application.DTOs;
using MeAjudaAi.Modules.Providers.Application.DTOs.Requests;
using MeAjudaAi.Shared.Commands;
using MeAjudaAi.Shared.Contracts;
using MeAjudaAi.Shared.Endpoints;
using MeAjudaAi.Shared.Functional;
using Microsoft.AspNetCore.Builder;
using Microsoft.AspNetCore.Http;
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Routing;

namespace MeAjudaAi.Modules.Providers.API.Endpoints.ProviderAdmin;

/// <summary>
/// Endpoint respons√°vel pela cria√ß√£o de novos prestadores de servi√ßos no sistema.
/// </summary>
/// <remarks>
/// Implementa padr√£o de endpoint m√≠nimo para cria√ß√£o de prestadores utilizando
/// arquitetura CQRS. Requer autoriza√ß√£o apropriada e valida dados antes de 
/// enviar comando para processamento. Integra com o sistema de usu√°rios.
/// </remarks>
public class CreateProviderEndpoint : BaseEndpoint, IEndpoint
{
    /// <summary>
    /// Configura o mapeamento do endpoint de cria√ß√£o de prestador.
    /// </summary>
    /// <param name="app">Builder de rotas do endpoint</param>
    /// <remarks>
    /// Configura endpoint POST em "/" com:
    /// - Autoriza√ß√£o obrigat√≥ria (SelfOrAdmin)
    /// - Documenta√ß√£o OpenAPI autom√°tica
    /// - C√≥digos de resposta apropriados
    /// - Nome √∫nico para refer√™ncia
    /// </remarks>
    public static void Map(IEndpointRouteBuilder app)
        => app.MapPost("/", CreateProviderAsync)
            .WithName("CreateProvider")
            .WithSummary("Criar novo prestador de servi√ßos")
            .WithDescription("""
                Cria um novo prestador de servi√ßos no sistema associado a um usu√°rio.
                
                **Caracter√≠sticas:**
                - üë§ Vincula√ß√£o obrigat√≥ria com usu√°rio existente
                - üè¢ Suporte para prestadores individuais e empresas
                - üìã Perfil de neg√≥cio completo com informa√ß√µes de contato
                - üìç Endere√ßo principal obrigat√≥rio
                - ‚úÖ Cria√ß√£o com status de verifica√ß√£o pendente
                
                **Campos obrigat√≥rios:**
                - UserId: ID de usu√°rio v√°lido e existente
                - Name: Nome do prestador
                - Type: Individual ou Company
                - BusinessProfile: Informa√ß√µes completas do neg√≥cio
                """)
            .Produces<Response<ProviderDto>>(StatusCodes.Status201Created)
            .Produces(StatusCodes.Status400BadRequest)
            .RequireAuthorization("SelfOrAdmin");

    /// <summary>
    /// Processa requisi√ß√£o de cria√ß√£o de prestador de forma ass√≠ncrona.
    /// </summary>
    /// <param name="request">Dados do prestador a ser criado</param>
    /// <param name="commandDispatcher">Dispatcher para envio de comandos CQRS</param>
    /// <param name="cancellationToken">Token de cancelamento da opera√ß√£o</param>
    /// <returns>
    /// Resultado HTTP contendo:
    /// - 201 Created: Prestador criado com sucesso e dados do prestador
    /// - 400 Bad Request: Erro de valida√ß√£o ou cria√ß√£o
    /// </returns>
    /// <remarks>
    /// Fluxo de execu√ß√£o:
    /// 1. Converte request em comando CQRS
    /// 2. Envia comando atrav√©s do dispatcher
    /// 3. Processa resultado e retorna resposta HTTP apropriada
    /// 4. Inclui localiza√ß√£o do recurso criado no header
    /// </remarks>
    private static async Task<IResult> CreateProviderAsync(
        [FromBody] CreateProviderRequest request,
        ICommandDispatcher commandDispatcher,
        CancellationToken cancellationToken)
    {
        var command = request.ToCommand();
        var result = await commandDispatcher.SendAsync<CreateProviderCommand, Result<ProviderDto>>(
            command, cancellationToken);

        return Handle(result, "GetProviderById", new { id = result.Value?.Id });
    }
}
