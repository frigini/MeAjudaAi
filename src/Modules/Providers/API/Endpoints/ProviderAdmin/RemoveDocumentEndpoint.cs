using MeAjudaAi.Modules.Providers.API.Mappers;
using MeAjudaAi.Modules.Providers.Application.Commands;
using MeAjudaAi.Modules.Providers.Application.DTOs;
using MeAjudaAi.Modules.Providers.Domain.Enums;
using MeAjudaAi.Shared.Commands;
using MeAjudaAi.Shared.Contracts;
using MeAjudaAi.Shared.Endpoints;
using MeAjudaAi.Shared.Functional;
using Microsoft.AspNetCore.Builder;
using Microsoft.AspNetCore.Http;
using Microsoft.AspNetCore.Routing;

namespace MeAjudaAi.Modules.Providers.API.Endpoints.ProviderAdmin;

/// <summary>
/// Endpoint respons√°vel pela remo√ß√£o de documentos de prestadores de servi√ßos.
/// </summary>
/// <remarks>
/// Implementa padr√£o de endpoint m√≠nimo para remo√ß√£o de documentos de verifica√ß√£o
/// utilizando arquitetura CQRS. Permite que prestadores removam seus pr√≥prios
/// documentos ou administradores gerenciem documentos. Opera√ß√£o irrevers√≠vel.
/// </remarks>
public class RemoveDocumentEndpoint : BaseEndpoint, IEndpoint
{
    /// <summary>
    /// Configura o mapeamento do endpoint de remo√ß√£o de documento.
    /// </summary>
    /// <param name="app">Builder de rotas do endpoint</param>
    /// <remarks>
    /// Configura endpoint DELETE em "/{id:guid}/documents/{documentType}" com:
    /// - Autoriza√ß√£o SelfOrAdmin (prestador pode remover pr√≥prios documentos ou admin gerenciar)
    /// - Valida√ß√£o autom√°tica de GUID para o par√¢metro ID
    /// - Valida√ß√£o autom√°tica de enum para documentType
    /// - Documenta√ß√£o OpenAPI autom√°tica
    /// - C√≥digos de resposta apropriados
    /// - Nome √∫nico para refer√™ncia
    /// </remarks>
    public static void Map(IEndpointRouteBuilder app)
        => app.MapDelete("/{id:guid}/documents/{documentType}", RemoveDocumentAsync)
            .WithName("RemoveDocument")
            .WithSummary("Remover documento do prestador")
            .WithDescription("""
                Remove um documento espec√≠fico do perfil do prestador de servi√ßos.
                
                **‚ö†Ô∏è Aten√ß√£o: Esta opera√ß√£o √© irrevers√≠vel!**
                
                **Caracter√≠sticas:**
                - üóëÔ∏è Remo√ß√£o permanente de documento
                - üîí Controle de acesso: pr√≥prio prestador ou administrador
                - ‚úÖ Valida√ß√£o de exist√™ncia do documento
                - üìã Atualiza√ß√£o autom√°tica do perfil
                
                **Tipos de documento remov√≠veis:**
                - CPF/CNPJ
                - RG/Identidade
                - Comprovante de resid√™ncia
                - Certifica√ß√µes profissionais
                - Outros documentos regulamentares
                
                **Valida√ß√µes aplicadas:**
                - Prestador existente e ativo
                - Documento existe no perfil
                - Autoriza√ß√£o para remo√ß√£o
                - Poss√≠vel impacto no status de verifica√ß√£o
                
                **Efeitos colaterais:**
                - Pode alterar status de verifica√ß√£o do prestador
                - Remove hist√≥rico do documento
                - Pode impactar elegibilidade para servi√ßos
                """)
            .RequireAuthorization("SelfOrAdmin")
            .Produces<Response<ProviderDto>>(StatusCodes.Status200OK)
            .Produces(StatusCodes.Status400BadRequest)
            .Produces(StatusCodes.Status404NotFound);

    /// <summary>
    /// Processa requisi√ß√£o de remo√ß√£o de documento de forma ass√≠ncrona.
    /// </summary>
    /// <param name="id">ID √∫nico do prestador</param>
    /// <param name="documentType">Tipo do documento a ser removido</param>
    /// <param name="commandDispatcher">Dispatcher para envio de comandos CQRS</param>
    /// <param name="cancellationToken">Token de cancelamento da opera√ß√£o</param>
    /// <returns>
    /// Resultado HTTP contendo:
    /// - 200 OK: Documento removido com sucesso e dados atualizados do prestador
    /// - 400 Bad Request: Erro de valida√ß√£o ou remo√ß√£o
    /// - 404 Not Found: Prestador ou documento n√£o encontrado
    /// </returns>
    /// <remarks>
    /// Fluxo de execu√ß√£o:
    /// 1. Valida ID do prestador e autoriza√ß√£o
    /// 2. Cria comando usando mapper ToRemoveDocumentCommand
    /// 3. Envia comando atrav√©s do dispatcher
    /// 4. Processa resultado e retorna prestador atualizado
    /// </remarks>
    private static async Task<IResult> RemoveDocumentAsync(
        Guid id,
        EDocumentType documentType,
        ICommandDispatcher commandDispatcher,
        CancellationToken cancellationToken)
    {
        var command = id.ToRemoveDocumentCommand(documentType);
        var result = await commandDispatcher.SendAsync<RemoveDocumentCommand, Result<ProviderDto>>(
            command, cancellationToken);

        return Handle(result);
    }
}
