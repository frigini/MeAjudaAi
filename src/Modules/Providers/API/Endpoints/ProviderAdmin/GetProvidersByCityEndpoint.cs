using MeAjudaAi.Modules.Providers.API.Mappers;
using MeAjudaAi.Modules.Providers.Application.DTOs;
using MeAjudaAi.Modules.Providers.Application.Queries;
using MeAjudaAi.Shared.Contracts;
using MeAjudaAi.Shared.Endpoints;
using MeAjudaAi.Shared.Functional;
using MeAjudaAi.Shared.Queries;
using Microsoft.AspNetCore.Builder;
using Microsoft.AspNetCore.Http;
using Microsoft.AspNetCore.Routing;

namespace MeAjudaAi.Modules.Providers.API.Endpoints.ProviderAdmin;

/// <summary>
/// Endpoint respons√°vel pela consulta de prestadores por cidade.
/// </summary>
/// <remarks>
/// Implementa padr√£o de endpoint m√≠nimo para busca de prestadores de servi√ßos
/// filtrados por cidade espec√≠fica. Utiliza arquitetura CQRS e permite
/// consulta p√∫blica para facilitar descoberta de servi√ßos.
/// </remarks>
public class GetProvidersByCityEndpoint : BaseEndpoint, IEndpoint
{
    /// <summary>
    /// Configura o mapeamento do endpoint de consulta de prestadores por cidade.
    /// </summary>
    /// <param name="app">Builder de rotas do endpoint</param>
    /// <remarks>
    /// Configura endpoint GET em "/by-city/{city}" com:
    /// - Autoriza√ß√£o obrigat√≥ria (RequireAuthorization)
    /// - Valida√ß√£o de par√¢metro de cidade
    /// - Documenta√ß√£o OpenAPI autom√°tica
    /// - Respostas estruturadas para lista de prestadores
    /// </remarks>
    public static void Map(IEndpointRouteBuilder app)
        => app.MapGet("/by-city/{city}", GetProvidersByCityAsync)
            .WithName("GetProvidersByCity")
            .WithSummary("Consultar prestadores por cidade")
            .WithDescription("""
                Recupera lista de prestadores de servi√ßos ativos em uma cidade espec√≠fica.
                
                **Caracter√≠sticas:**
                - üèôÔ∏è Busca por localiza√ß√£o geogr√°fica
                - ‚ö° Consulta otimizada com √≠ndices
                - üìã Lista completa de prestadores dispon√≠veis
                - üîç Filtro autom√°tico por status ativo
                
                **Casos de uso:**
                - Descoberta de prestadores em cidade espec√≠fica
                - Listagem para usu√°rios finais
                - Integra√ß√£o com sistemas de busca
                
                **Resposta incluir√°:**
                - Lista de prestadores ativos na cidade
                - Dados b√°sicos de cada prestador
                - Informa√ß√µes de contato
                - Status de verifica√ß√£o
                """)
            .RequireAuthorization()
            .Produces<Response<IReadOnlyList<ProviderDto>>>(StatusCodes.Status200OK)
            .Produces(StatusCodes.Status400BadRequest);

    /// <summary>
    /// Implementa a l√≥gica de consulta de prestadores por cidade.
    /// </summary>
    /// <param name="city">Nome da cidade para busca</param>
    /// <param name="queryDispatcher">Dispatcher para envio de queries CQRS</param>
    /// <param name="cancellationToken">Token de cancelamento da opera√ß√£o</param>
    /// <returns>Resultado HTTP com lista de prestadores ou erro apropriado</returns>
    /// <remarks>
    /// Processo da consulta:
    /// 1. Valida par√¢metro de cidade
    /// 2. Cria query usando mapper ToCityQuery
    /// 3. Envia query atrav√©s do dispatcher CQRS
    /// 4. Retorna resposta HTTP com lista de prestadores
    /// </remarks>
    private static async Task<IResult> GetProvidersByCityAsync(
        string city,
        IQueryDispatcher queryDispatcher,
        CancellationToken cancellationToken)
    {
        var query = city.ToCityQuery();
        var result = await queryDispatcher.QueryAsync<GetProvidersByCityQuery, Result<IReadOnlyList<ProviderDto>>>(
            query, cancellationToken);

        return Handle(result);
    }
}
