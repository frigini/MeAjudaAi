using MeAjudaAi.Modules.Providers.API.Mappers;
using MeAjudaAi.Modules.Providers.Application.DTOs;
using MeAjudaAi.Modules.Providers.Application.Queries;
using MeAjudaAi.Shared.Contracts;
using MeAjudaAi.Shared.Endpoints;
using MeAjudaAi.Shared.Functional;
using MeAjudaAi.Shared.Queries;
using Microsoft.AspNetCore.Builder;
using Microsoft.AspNetCore.Http;
using Microsoft.AspNetCore.Routing;

namespace MeAjudaAi.Modules.Providers.API.Endpoints.ProviderAdmin;

/// <summary>
/// Endpoint respons√°vel pela consulta de prestador por ID do usu√°rio.
/// </summary>
/// <remarks>
/// Implementa padr√£o de endpoint m√≠nimo para consulta de prestador atrav√©s
/// do ID do usu√°rio associado. Utiliza arquitetura CQRS e permite que
/// usu√°rios consultem seus pr√≥prios dados de prestador ou administradores
/// consultem qualquer prestador pelo ID do usu√°rio.
/// </remarks>
public class GetProviderByUserIdEndpoint : BaseEndpoint, IEndpoint
{
    /// <summary>
    /// Configura o mapeamento do endpoint de consulta de prestador por ID do usu√°rio.
    /// </summary>
    /// <param name="app">Builder de rotas do endpoint</param>
    /// <remarks>
    /// Configura endpoint GET em "/by-user/{userId:guid}" com:
    /// - Autoriza√ß√£o SelfOrAdmin (usu√°rio pode ver pr√≥prios dados ou admin v√™ qualquer)
    /// - Valida√ß√£o autom√°tica de GUID para o par√¢metro userId
    /// - Documenta√ß√£o OpenAPI autom√°tica
    /// - Respostas estruturadas para sucesso (200) e n√£o encontrado (404)
    /// </remarks>
    public static void Map(IEndpointRouteBuilder app)
        => app.MapGet("/by-user/{userId:guid}", GetProviderByUserAsync)
            .WithName("GetProviderByUserId")
            .WithSummary("Consultar prestador por ID do usu√°rio")
            .WithDescription("""
                Recupera dados do prestador de servi√ßos associado a um usu√°rio espec√≠fico.
                
                **Caracter√≠sticas:**
                - üë§ Busca por vincula√ß√£o com usu√°rio
                - ‚ö° Consulta otimizada e direta
                - üîí Controle de acesso: pr√≥prio usu√°rio ou administrador
                - üìä Retorna dados completos do prestador
                
                **Casos de uso:**
                - Usu√°rio consulta seu pr√≥prio perfil de prestador
                - Administrador consulta prestador de usu√°rio espec√≠fico
                - Verifica√ß√£o de exist√™ncia de prestador para usu√°rio
                
                **Resposta incluir√°:**
                - Todos os dados do prestador de servi√ßos
                - Perfil de neg√≥cio associado
                - Documentos e qualifica√ß√µes
                - Status de verifica√ß√£o atual
                """)
            .RequireAuthorization("SelfOrAdmin")
            .Produces<Response<ProviderDto>>(StatusCodes.Status200OK)
            .Produces(StatusCodes.Status404NotFound);

    /// <summary>
    /// Implementa a l√≥gica de consulta de prestador por ID do usu√°rio.
    /// </summary>
    /// <param name="userId">ID √∫nico do usu√°rio (GUID)</param>
    /// <param name="queryDispatcher">Dispatcher para envio de queries CQRS</param>
    /// <param name="cancellationToken">Token de cancelamento da opera√ß√£o</param>
    /// <returns>Resultado HTTP com dados do prestador ou erro apropriado</returns>
    /// <remarks>
    /// Processo da consulta:
    /// 1. Valida ID do usu√°rio no formato GUID
    /// 2. Cria query usando mapper ToUserQuery
    /// 3. Envia query atrav√©s do dispatcher CQRS
    /// 4. Retorna resposta HTTP com dados do prestador ou NotFound
    /// </remarks>
    private static async Task<IResult> GetProviderByUserAsync(
        Guid userId,
        IQueryDispatcher queryDispatcher,
        CancellationToken cancellationToken)
    {
        var query = userId.ToUserQuery();
        var result = await queryDispatcher.QueryAsync<GetProviderByUserIdQuery, Result<ProviderDto?>>(
            query, cancellationToken);

        return Handle(result);
    }
}
