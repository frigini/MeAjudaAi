using MeAjudaAi.Modules.Providers.API.Mappers;
using MeAjudaAi.Modules.Providers.Application.Commands;
using MeAjudaAi.Modules.Providers.Application.DTOs;
using MeAjudaAi.Modules.Providers.Application.DTOs.Requests;
using MeAjudaAi.Shared.Commands;
using MeAjudaAi.Shared.Contracts;
using MeAjudaAi.Shared.Endpoints;
using MeAjudaAi.Shared.Functional;
using Microsoft.AspNetCore.Builder;
using Microsoft.AspNetCore.Http;
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Routing;

namespace MeAjudaAi.Modules.Providers.API.Endpoints.ProviderAdmin;

/// <summary>
/// Endpoint respons√°vel pela adi√ß√£o de documentos a prestadores de servi√ßos.
/// </summary>
/// <remarks>
/// Implementa padr√£o de endpoint m√≠nimo para adi√ß√£o de documentos de verifica√ß√£o
/// utilizando arquitetura CQRS. Permite que prestadores adicionem documentos
/// necess√°rios para verifica√ß√£o ou administradores gerenciem documentos.
/// </remarks>
public class AddDocumentEndpoint : BaseEndpoint, IEndpoint
{
    /// <summary>
    /// Configura o mapeamento do endpoint de adi√ß√£o de documento.
    /// </summary>
    /// <param name="app">Builder de rotas do endpoint</param>
    /// <remarks>
    /// Configura endpoint POST em "/{id:guid}/documents" com:
    /// - Autoriza√ß√£o SelfOrAdmin (prestador pode adicionar pr√≥prios documentos ou admin gerenciar)
    /// - Valida√ß√£o autom√°tica de GUID para o par√¢metro ID
    /// - Documenta√ß√£o OpenAPI autom√°tica
    /// - C√≥digos de resposta apropriados
    /// - Nome √∫nico para refer√™ncia
    /// </remarks>
    public static void Map(IEndpointRouteBuilder app)
        => app.MapPost("/{id:guid}/documents", AddDocumentAsync)
            .WithName("AddDocument")
            .WithSummary("Adicionar documento ao prestador")
            .WithDescription("""
                Adiciona um novo documento de verifica√ß√£o ao perfil do prestador de servi√ßos.
                
                **Caracter√≠sticas:**
                - üìÑ Adi√ß√£o de documentos de verifica√ß√£o
                - üîí Controle de acesso: pr√≥prio prestador ou administrador
                - ‚úÖ Valida√ß√£o autom√°tica de tipo e formato
                - üìã Atualiza√ß√£o autom√°tica do perfil
                
                **Tipos de documento suportados:**
                - CPF/CNPJ
                - RG/Identidade
                - Comprovante de resid√™ncia
                - Certifica√ß√µes profissionais
                - Outros documentos regulamentares
                
                **Campos obrigat√≥rios:**
                - Number: N√∫mero/c√≥digo do documento
                - DocumentType: Tipo espec√≠fico do documento
                
                **Valida√ß√µes aplicadas:**
                - Formato v√°lido do n√∫mero do documento
                - Tipo de documento permitido
                - Prestador existente e ativo
                - N√£o duplica√ß√£o de documentos do mesmo tipo
                """)
            .RequireAuthorization("SelfOrAdmin")
            .Produces<Response<ProviderDto>>(StatusCodes.Status200OK)
            .Produces(StatusCodes.Status400BadRequest)
            .Produces(StatusCodes.Status404NotFound);

    /// <summary>
    /// Processa requisi√ß√£o de adi√ß√£o de documento de forma ass√≠ncrona.
    /// </summary>
    /// <param name="id">ID √∫nico do prestador</param>
    /// <param name="request">Dados do documento a ser adicionado</param>
    /// <param name="commandDispatcher">Dispatcher para envio de comandos CQRS</param>
    /// <param name="cancellationToken">Token de cancelamento da opera√ß√£o</param>
    /// <returns>
    /// Resultado HTTP contendo:
    /// - 200 OK: Documento adicionado com sucesso e dados atualizados do prestador
    /// - 400 Bad Request: Erro de valida√ß√£o ou adi√ß√£o
    /// - 404 Not Found: Prestador n√£o encontrado
    /// </returns>
    /// <remarks>
    /// Fluxo de execu√ß√£o:
    /// 1. Valida ID do prestador e autoriza√ß√£o
    /// 2. Converte request em comando CQRS
    /// 3. Envia comando atrav√©s do dispatcher
    /// 4. Processa resultado e retorna prestador atualizado
    /// </remarks>
    private static async Task<IResult> AddDocumentAsync(
        Guid id,
        [FromBody] AddDocumentRequest request,
        ICommandDispatcher commandDispatcher,
        CancellationToken cancellationToken)
    {
        if (request is null)
            return Results.BadRequest("Request body is required");

        var command = request.ToCommand(id);
        var result = await commandDispatcher.SendAsync<AddDocumentCommand, Result<ProviderDto>>(
            command, cancellationToken);

        return Handle(result);
    }
}
