using MeAjudaAi.Modules.Providers.API.Mappers;
using MeAjudaAi.Modules.Providers.Application.Commands;
using MeAjudaAi.Modules.Providers.Application.DTOs;
using MeAjudaAi.Modules.Providers.Application.DTOs.Requests;
using MeAjudaAi.Shared.Commands;
using MeAjudaAi.Shared.Contracts;
using MeAjudaAi.Shared.Endpoints;
using MeAjudaAi.Shared.Functional;
using Microsoft.AspNetCore.Builder;
using Microsoft.AspNetCore.Http;
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Routing;

namespace MeAjudaAi.Modules.Providers.API.Endpoints.ProviderAdmin;

/// <summary>
/// Endpoint respons√°vel pela atualiza√ß√£o de perfil de prestadores de servi√ßos.
/// </summary>
/// <remarks>
/// Implementa padr√£o de endpoint m√≠nimo para atualiza√ß√£o de dados de perfil
/// utilizando arquitetura CQRS. Permite que prestadores atualizem seus pr√≥prios
/// dados ou administradores atualizem dados de qualquer prestador. Valida
/// permiss√µes e dados antes de processar a atualiza√ß√£o.
/// </remarks>
public class UpdateProviderProfileEndpoint : BaseEndpoint, IEndpoint
{
    /// <summary>
    /// Configura o mapeamento do endpoint de atualiza√ß√£o de perfil.
    /// </summary>
    /// <param name="app">Builder de rotas do endpoint</param>
    /// <remarks>
    /// Configura endpoint PUT em "/{id:guid}" com:
    /// - Autoriza√ß√£o SelfOrAdmin (prestador pode atualizar pr√≥prios dados ou admin qualquer)
    /// - Valida√ß√£o autom√°tica de GUID para o par√¢metro ID
    /// - Documenta√ß√£o OpenAPI autom√°tica
    /// - C√≥digos de resposta apropriados
    /// - Nome √∫nico para refer√™ncia
    /// </remarks>
    public static void Map(IEndpointRouteBuilder app)
        => app.MapPut("/{id:guid}", UpdateProviderProfileAsync)
            .WithName("UpdateProviderProfile")
            .WithSummary("Atualizar perfil do prestador")
            .WithDescription("""
                Atualiza informa√ß√µes do perfil de um prestador de servi√ßos existente.
                
                **Caracter√≠sticas:**
                - ‚úèÔ∏è Atualiza√ß√£o de dados pessoais/empresariais
                - üè¢ Modifica√ß√£o do perfil de neg√≥cio
                - üìû Atualiza√ß√£o de informa√ß√µes de contato
                - üìç Altera√ß√£o de endere√ßo principal
                - üîí Controle de acesso: pr√≥prio prestador ou administrador
                
                **Campos atualiz√°veis:**
                - Nome do prestador
                - Perfil de neg√≥cio completo
                - Informa√ß√µes de contato (email, telefone, website)
                - Endere√ßo principal
                - Descri√ß√£o do neg√≥cio
                
                **Valida√ß√µes aplicadas:**
                - Formato de email v√°lido
                - Campos obrigat√≥rios preenchidos
                - Autoriza√ß√£o de acesso ao prestador
                """)
            .RequireAuthorization("SelfOrAdmin")
            .Produces<Response<ProviderDto>>(StatusCodes.Status200OK)
            .Produces(StatusCodes.Status400BadRequest)
            .Produces(StatusCodes.Status404NotFound);

    /// <summary>
    /// Processa requisi√ß√£o de atualiza√ß√£o de perfil de forma ass√≠ncrona.
    /// </summary>
    /// <param name="id">ID √∫nico do prestador a ser atualizado</param>
    /// <param name="request">Dados atualizados do prestador</param>
    /// <param name="commandDispatcher">Dispatcher para envio de comandos CQRS</param>
    /// <param name="cancellationToken">Token de cancelamento da opera√ß√£o</param>
    /// <returns>
    /// Resultado HTTP contendo:
    /// - 200 OK: Prestador atualizado com sucesso e dados atualizados
    /// - 400 Bad Request: Erro de valida√ß√£o ou atualiza√ß√£o
    /// - 404 Not Found: Prestador n√£o encontrado
    /// </returns>
    /// <remarks>
    /// Fluxo de execu√ß√£o:
    /// 1. Valida ID do prestador e autoriza√ß√£o
    /// 2. Converte request em comando CQRS
    /// 3. Envia comando atrav√©s do dispatcher
    /// 4. Processa resultado e retorna resposta HTTP apropriada
    /// </remarks>
    private static async Task<IResult> UpdateProviderProfileAsync(
        Guid id,
        [FromBody] UpdateProviderProfileRequest request,
        ICommandDispatcher commandDispatcher,
        CancellationToken cancellationToken)
    {
        var command = request.ToCommand(id);
        var result = await commandDispatcher.SendAsync<UpdateProviderProfileCommand, Result<ProviderDto>>(
            command, cancellationToken);

        return Handle(result);
    }
}
